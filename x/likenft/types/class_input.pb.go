// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: likechain/likenft/v1/class_input.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClassInput struct {
	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol      string      `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Description string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Uri         string      `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	UriHash     string      `protobuf:"bytes,5,opt,name=uri_hash,json=uriHash,proto3" json:"uri_hash,omitempty"`
	Metadata    JsonInput   `protobuf:"bytes,6,opt,name=metadata,proto3,customtype=JsonInput" json:"metadata"`
	Config      ClassConfig `protobuf:"bytes,7,opt,name=config,proto3" json:"config"`
}

func (m *ClassInput) Reset()         { *m = ClassInput{} }
func (m *ClassInput) String() string { return proto.CompactTextString(m) }
func (*ClassInput) ProtoMessage()    {}
func (*ClassInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a218a428b4a4bc, []int{0}
}
func (m *ClassInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassInput.Merge(m, src)
}
func (m *ClassInput) XXX_Size() int {
	return m.Size()
}
func (m *ClassInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassInput.DiscardUnknown(m)
}

var xxx_messageInfo_ClassInput proto.InternalMessageInfo

func (m *ClassInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClassInput) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ClassInput) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ClassInput) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *ClassInput) GetUriHash() string {
	if m != nil {
		return m.UriHash
	}
	return ""
}

func (m *ClassInput) GetConfig() ClassConfig {
	if m != nil {
		return m.Config
	}
	return ClassConfig{}
}

type ClassParentInput struct {
	Type         ClassParentType `protobuf:"varint,1,opt,name=type,proto3,enum=likechain.likenft.v1.ClassParentType" json:"type,omitempty"`
	IscnIdPrefix string          `protobuf:"bytes,2,opt,name=iscn_id_prefix,json=iscnIdPrefix,proto3" json:"iscn_id_prefix,omitempty"`
}

func (m *ClassParentInput) Reset()         { *m = ClassParentInput{} }
func (m *ClassParentInput) String() string { return proto.CompactTextString(m) }
func (*ClassParentInput) ProtoMessage()    {}
func (*ClassParentInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a218a428b4a4bc, []int{1}
}
func (m *ClassParentInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassParentInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassParentInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassParentInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassParentInput.Merge(m, src)
}
func (m *ClassParentInput) XXX_Size() int {
	return m.Size()
}
func (m *ClassParentInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassParentInput.DiscardUnknown(m)
}

var xxx_messageInfo_ClassParentInput proto.InternalMessageInfo

func (m *ClassParentInput) GetType() ClassParentType {
	if m != nil {
		return m.Type
	}
	return ClassParentType_UNKNOWN
}

func (m *ClassParentInput) GetIscnIdPrefix() string {
	if m != nil {
		return m.IscnIdPrefix
	}
	return ""
}

func init() {
	proto.RegisterType((*ClassInput)(nil), "likechain.likenft.v1.ClassInput")
	proto.RegisterType((*ClassParentInput)(nil), "likechain.likenft.v1.ClassParentInput")
}

func init() {
	proto.RegisterFile("likechain/likenft/v1/class_input.proto", fileDescriptor_05a218a428b4a4bc)
}

var fileDescriptor_05a218a428b4a4bc = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0x41, 0xcb, 0xda, 0x40,
	0x10, 0xcd, 0xf6, 0x4b, 0xa3, 0xae, 0x22, 0x76, 0x91, 0x92, 0x7a, 0x88, 0xa9, 0x60, 0x91, 0x82,
	0x09, 0x5a, 0x3c, 0xf4, 0x54, 0xd0, 0x4b, 0xed, 0xa5, 0x12, 0x7a, 0xea, 0x25, 0xac, 0x49, 0x4c,
	0x96, 0x9a, 0xdd, 0x90, 0xdd, 0x88, 0xf9, 0x17, 0xfd, 0x59, 0x1e, 0x3d, 0x96, 0x1e, 0xa4, 0xe8,
	0x8f, 0xe8, 0xb5, 0xec, 0x26, 0x48, 0x0f, 0x1f, 0xde, 0xde, 0xbe, 0xf7, 0x66, 0x66, 0x67, 0x1e,
	0x7c, 0xb7, 0x27, 0x3f, 0xa2, 0x20, 0xc1, 0x84, 0xba, 0x12, 0xd1, 0x9d, 0x70, 0x0f, 0x33, 0x37,
	0xd8, 0x63, 0xce, 0x7d, 0x42, 0xb3, 0x42, 0x38, 0x59, 0xce, 0x04, 0x43, 0xfd, 0xbb, 0xcf, 0xa9,
	0x7d, 0xce, 0x61, 0x36, 0xe8, 0xc7, 0x2c, 0x66, 0xca, 0xe0, 0x4a, 0x54, 0x79, 0x07, 0xe3, 0x07,
	0x3d, 0x43, 0x2c, 0x70, 0x65, 0x1b, 0xfd, 0x05, 0x10, 0xae, 0x24, 0xb9, 0x96, 0x73, 0x10, 0x82,
	0x3a, 0xc5, 0x69, 0x64, 0x02, 0x1b, 0x4c, 0x5a, 0x9e, 0xc2, 0xe8, 0x35, 0x34, 0x78, 0x99, 0x6e,
	0xd9, 0xde, 0x7c, 0xa1, 0xd8, 0xfa, 0x85, 0x6c, 0xd8, 0x0e, 0x23, 0x1e, 0xe4, 0x24, 0x13, 0x84,
	0x51, 0xf3, 0x49, 0x89, 0xff, 0x53, 0xa8, 0x07, 0x9f, 0x8a, 0x9c, 0x98, 0xba, 0x52, 0x24, 0x44,
	0x6f, 0x60, 0xb3, 0xc8, 0x89, 0x9f, 0x60, 0x9e, 0x98, 0x2f, 0x15, 0xdd, 0x28, 0x72, 0xf2, 0x19,
	0xf3, 0x04, 0x4d, 0x61, 0x33, 0x8d, 0x04, 0x96, 0x7f, 0x33, 0x0d, 0x1b, 0x4c, 0x3a, 0xcb, 0x57,
	0xa7, 0xcb, 0x50, 0xfb, 0x7d, 0x19, 0xb6, 0xbe, 0x70, 0x46, 0xd5, 0xff, 0xbc, 0xbb, 0x05, 0x7d,
	0x82, 0x46, 0xc0, 0xe8, 0x8e, 0xc4, 0x66, 0xc3, 0x06, 0x93, 0xf6, 0xfc, 0xad, 0xf3, 0xdc, 0x71,
	0x1c, 0xb5, 0xdb, 0x4a, 0x19, 0x97, 0xba, 0xec, 0xe7, 0xd5, 0x65, 0xa3, 0x12, 0xf6, 0x94, 0xb8,
	0xc1, 0x79, 0x44, 0x45, 0xb5, 0xfe, 0x47, 0xa8, 0x8b, 0x32, 0xab, 0xd6, 0xef, 0xce, 0xc7, 0x0f,
	0x5a, 0x56, 0x55, 0xdf, 0xca, 0x2c, 0xf2, 0x54, 0x09, 0x7a, 0x0f, 0xbb, 0x84, 0x07, 0xd4, 0x27,
	0xa1, 0x9f, 0xe5, 0xd1, 0x8e, 0x1c, 0xab, 0x6b, 0xa9, 0xa1, 0xc0, 0xeb, 0x48, 0x6d, 0x1d, 0x6e,
	0x94, 0xb2, 0xfc, 0x7a, 0xba, 0x5a, 0xe0, 0x7c, 0xb5, 0xc0, 0x9f, 0xab, 0x05, 0x7e, 0xde, 0x2c,
	0xed, 0x7c, 0xb3, 0xb4, 0x5f, 0x37, 0x4b, 0xfb, 0xbe, 0x88, 0x89, 0x48, 0x8a, 0xad, 0x13, 0xb0,
	0x54, 0xc5, 0x16, 0xb0, 0x3a, 0x3f, 0x09, 0xa6, 0x55, 0x9c, 0x87, 0x85, 0x7b, 0xbc, 0x67, 0x2a,
	0x67, 0xf3, 0xad, 0xa1, 0xc2, 0xfc, 0xf0, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x13, 0x33, 0x95, 0x46,
	0x49, 0x02, 0x00, 0x00,
}

func (m *ClassInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClassInput(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Metadata.Size()
		i -= size
		if _, err := m.Metadata.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintClassInput(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.UriHash) > 0 {
		i -= len(m.UriHash)
		copy(dAtA[i:], m.UriHash)
		i = encodeVarintClassInput(dAtA, i, uint64(len(m.UriHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintClassInput(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintClassInput(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintClassInput(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClassInput(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClassParentInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassParentInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassParentInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IscnIdPrefix) > 0 {
		i -= len(m.IscnIdPrefix)
		copy(dAtA[i:], m.IscnIdPrefix)
		i = encodeVarintClassInput(dAtA, i, uint64(len(m.IscnIdPrefix)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintClassInput(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintClassInput(dAtA []byte, offset int, v uint64) int {
	offset -= sovClassInput(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClassInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClassInput(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovClassInput(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovClassInput(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovClassInput(uint64(l))
	}
	l = len(m.UriHash)
	if l > 0 {
		n += 1 + l + sovClassInput(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovClassInput(uint64(l))
	l = m.Config.Size()
	n += 1 + l + sovClassInput(uint64(l))
	return n
}

func (m *ClassParentInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovClassInput(uint64(m.Type))
	}
	l = len(m.IscnIdPrefix)
	if l > 0 {
		n += 1 + l + sovClassInput(uint64(l))
	}
	return n
}

func sovClassInput(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClassInput(x uint64) (n int) {
	return sovClassInput(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClassInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassInput
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassInput
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassInput
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassInput
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassInput
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassInput
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UriHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClassInput
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClassInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClassInput
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClassInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassInput(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassInput
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassParentInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassInput
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassParentInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassParentInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ClassParentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IscnIdPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassInput
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IscnIdPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassInput(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassInput
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClassInput(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClassInput
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassInput
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassInput
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClassInput
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClassInput
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClassInput
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClassInput        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClassInput          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClassInput = fmt.Errorf("proto: unexpected end of group")
)
