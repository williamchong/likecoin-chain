// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: likechain/likenft/v1/royalty_config.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RoyaltyConfigByClass struct {
	ClassId       string        `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	RoyaltyConfig RoyaltyConfig `protobuf:"bytes,2,opt,name=royalty_config,json=royaltyConfig,proto3" json:"royalty_config"`
}

func (m *RoyaltyConfigByClass) Reset()         { *m = RoyaltyConfigByClass{} }
func (m *RoyaltyConfigByClass) String() string { return proto.CompactTextString(m) }
func (*RoyaltyConfigByClass) ProtoMessage()    {}
func (*RoyaltyConfigByClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_33eb265073526502, []int{0}
}
func (m *RoyaltyConfigByClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoyaltyConfigByClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoyaltyConfigByClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoyaltyConfigByClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoyaltyConfigByClass.Merge(m, src)
}
func (m *RoyaltyConfigByClass) XXX_Size() int {
	return m.Size()
}
func (m *RoyaltyConfigByClass) XXX_DiscardUnknown() {
	xxx_messageInfo_RoyaltyConfigByClass.DiscardUnknown(m)
}

var xxx_messageInfo_RoyaltyConfigByClass proto.InternalMessageInfo

func (m *RoyaltyConfigByClass) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *RoyaltyConfigByClass) GetRoyaltyConfig() RoyaltyConfig {
	if m != nil {
		return m.RoyaltyConfig
	}
	return RoyaltyConfig{}
}

type RoyaltyConfig struct {
	RateBasisPoints uint64               `protobuf:"varint,1,opt,name=rate_basis_points,json=rateBasisPoints,proto3" json:"rate_basis_points,omitempty"`
	Stakeholders    []RoyaltyStakeholder `protobuf:"bytes,2,rep,name=stakeholders,proto3" json:"stakeholders"`
}

func (m *RoyaltyConfig) Reset()         { *m = RoyaltyConfig{} }
func (m *RoyaltyConfig) String() string { return proto.CompactTextString(m) }
func (*RoyaltyConfig) ProtoMessage()    {}
func (*RoyaltyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_33eb265073526502, []int{1}
}
func (m *RoyaltyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoyaltyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoyaltyConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoyaltyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoyaltyConfig.Merge(m, src)
}
func (m *RoyaltyConfig) XXX_Size() int {
	return m.Size()
}
func (m *RoyaltyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RoyaltyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RoyaltyConfig proto.InternalMessageInfo

func (m *RoyaltyConfig) GetRateBasisPoints() uint64 {
	if m != nil {
		return m.RateBasisPoints
	}
	return 0
}

func (m *RoyaltyConfig) GetStakeholders() []RoyaltyStakeholder {
	if m != nil {
		return m.Stakeholders
	}
	return nil
}

type RoyaltyStakeholder struct {
	Account github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=account,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"account,omitempty"`
	Weight  uint64                                        `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *RoyaltyStakeholder) Reset()         { *m = RoyaltyStakeholder{} }
func (m *RoyaltyStakeholder) String() string { return proto.CompactTextString(m) }
func (*RoyaltyStakeholder) ProtoMessage()    {}
func (*RoyaltyStakeholder) Descriptor() ([]byte, []int) {
	return fileDescriptor_33eb265073526502, []int{2}
}
func (m *RoyaltyStakeholder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoyaltyStakeholder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoyaltyStakeholder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoyaltyStakeholder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoyaltyStakeholder.Merge(m, src)
}
func (m *RoyaltyStakeholder) XXX_Size() int {
	return m.Size()
}
func (m *RoyaltyStakeholder) XXX_DiscardUnknown() {
	xxx_messageInfo_RoyaltyStakeholder.DiscardUnknown(m)
}

var xxx_messageInfo_RoyaltyStakeholder proto.InternalMessageInfo

func (m *RoyaltyStakeholder) GetAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *RoyaltyStakeholder) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type RoyaltyConfigInput struct {
	RateBasisPoints uint64                    `protobuf:"varint,1,opt,name=rate_basis_points,json=rateBasisPoints,proto3" json:"rate_basis_points,omitempty"`
	Stakeholders    []RoyaltyStakeholderInput `protobuf:"bytes,2,rep,name=stakeholders,proto3" json:"stakeholders"`
}

func (m *RoyaltyConfigInput) Reset()         { *m = RoyaltyConfigInput{} }
func (m *RoyaltyConfigInput) String() string { return proto.CompactTextString(m) }
func (*RoyaltyConfigInput) ProtoMessage()    {}
func (*RoyaltyConfigInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_33eb265073526502, []int{3}
}
func (m *RoyaltyConfigInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoyaltyConfigInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoyaltyConfigInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoyaltyConfigInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoyaltyConfigInput.Merge(m, src)
}
func (m *RoyaltyConfigInput) XXX_Size() int {
	return m.Size()
}
func (m *RoyaltyConfigInput) XXX_DiscardUnknown() {
	xxx_messageInfo_RoyaltyConfigInput.DiscardUnknown(m)
}

var xxx_messageInfo_RoyaltyConfigInput proto.InternalMessageInfo

func (m *RoyaltyConfigInput) GetRateBasisPoints() uint64 {
	if m != nil {
		return m.RateBasisPoints
	}
	return 0
}

func (m *RoyaltyConfigInput) GetStakeholders() []RoyaltyStakeholderInput {
	if m != nil {
		return m.Stakeholders
	}
	return nil
}

type RoyaltyStakeholderInput struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Weight  uint64 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *RoyaltyStakeholderInput) Reset()         { *m = RoyaltyStakeholderInput{} }
func (m *RoyaltyStakeholderInput) String() string { return proto.CompactTextString(m) }
func (*RoyaltyStakeholderInput) ProtoMessage()    {}
func (*RoyaltyStakeholderInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_33eb265073526502, []int{4}
}
func (m *RoyaltyStakeholderInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoyaltyStakeholderInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoyaltyStakeholderInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoyaltyStakeholderInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoyaltyStakeholderInput.Merge(m, src)
}
func (m *RoyaltyStakeholderInput) XXX_Size() int {
	return m.Size()
}
func (m *RoyaltyStakeholderInput) XXX_DiscardUnknown() {
	xxx_messageInfo_RoyaltyStakeholderInput.DiscardUnknown(m)
}

var xxx_messageInfo_RoyaltyStakeholderInput proto.InternalMessageInfo

func (m *RoyaltyStakeholderInput) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RoyaltyStakeholderInput) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterType((*RoyaltyConfigByClass)(nil), "likechain.likenft.v1.RoyaltyConfigByClass")
	proto.RegisterType((*RoyaltyConfig)(nil), "likechain.likenft.v1.RoyaltyConfig")
	proto.RegisterType((*RoyaltyStakeholder)(nil), "likechain.likenft.v1.RoyaltyStakeholder")
	proto.RegisterType((*RoyaltyConfigInput)(nil), "likechain.likenft.v1.RoyaltyConfigInput")
	proto.RegisterType((*RoyaltyStakeholderInput)(nil), "likechain.likenft.v1.RoyaltyStakeholderInput")
}

func init() {
	proto.RegisterFile("likechain/likenft/v1/royalty_config.proto", fileDescriptor_33eb265073526502)
}

var fileDescriptor_33eb265073526502 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0xee, 0xd2, 0x40,
	0x14, 0xc5, 0x3b, 0x48, 0x40, 0x06, 0xd0, 0x38, 0x21, 0x5a, 0x5d, 0x14, 0x52, 0x37, 0xd5, 0xa4,
	0x6d, 0xc0, 0xf0, 0x00, 0x94, 0x15, 0x61, 0x21, 0xa9, 0x0b, 0x13, 0x37, 0x4d, 0x99, 0x96, 0x76,
	0x42, 0xe9, 0x34, 0x9d, 0x01, 0xed, 0xda, 0x07, 0xd0, 0xad, 0x6f, 0xc4, 0x92, 0xa5, 0x2b, 0x62,
	0xe0, 0x2d, 0x5c, 0x99, 0x4e, 0x2b, 0xd2, 0x88, 0x1f, 0xff, 0x55, 0xef, 0xdc, 0x9e, 0x9e, 0x7b,
	0xfa, 0xcb, 0x5c, 0xf8, 0x22, 0x22, 0x6b, 0x1f, 0x87, 0x2e, 0x89, 0xcd, 0xbc, 0x8a, 0x57, 0xdc,
	0xdc, 0x0d, 0xcd, 0x94, 0x66, 0x6e, 0xc4, 0x33, 0x07, 0xd3, 0x78, 0x45, 0x02, 0x23, 0x49, 0x29,
	0xa7, 0xa8, 0x77, 0x91, 0x1a, 0xa5, 0xd4, 0xd8, 0x0d, 0x9f, 0xf5, 0x02, 0x1a, 0x50, 0x21, 0x30,
	0xf3, 0xaa, 0xd0, 0xaa, 0x1f, 0x01, 0xec, 0xd9, 0x85, 0xc9, 0x54, 0x78, 0x58, 0xd9, 0x34, 0x72,
	0x19, 0x43, 0x4f, 0xe1, 0x7d, 0x9c, 0x17, 0x0e, 0xf1, 0x64, 0x30, 0x00, 0x5a, 0xcb, 0x6e, 0x8a,
	0xf3, 0xcc, 0x43, 0x0b, 0xf8, 0xa0, 0x3a, 0x57, 0xae, 0x0d, 0x80, 0xd6, 0x1e, 0x3d, 0x37, 0x6e,
	0x0d, 0x36, 0xaa, 0xf6, 0xf5, 0xfd, 0xb1, 0x2f, 0xd9, 0xdd, 0xf4, 0xba, 0xa9, 0x7e, 0x02, 0xb0,
	0x5b, 0x91, 0xa1, 0x97, 0xf0, 0x51, 0xea, 0x72, 0xdf, 0x59, 0xba, 0x8c, 0x30, 0x27, 0xa1, 0x24,
	0xe6, 0x4c, 0xe4, 0xa8, 0xdb, 0x0f, 0xf3, 0x17, 0x56, 0xde, 0x5f, 0x88, 0x36, 0xb2, 0x61, 0x87,
	0x71, 0x77, 0xed, 0x87, 0x34, 0xf2, 0xfc, 0x94, 0xc9, 0xb5, 0xc1, 0x3d, 0xad, 0x3d, 0xd2, 0xfe,
	0x9a, 0xe6, 0xcd, 0xaf, 0x0f, 0xca, 0x48, 0x15, 0x0f, 0x35, 0x83, 0xe8, 0x77, 0x25, 0x9a, 0xc3,
	0xa6, 0x8b, 0x31, 0xdd, 0xc6, 0x5c, 0x64, 0xe9, 0x58, 0xc3, 0xef, 0xc7, 0xbe, 0x1e, 0x10, 0x1e,
	0x6e, 0x97, 0x06, 0xa6, 0x1b, 0x13, 0x53, 0xb6, 0xa1, 0xac, 0x7c, 0xe8, 0xcc, 0x5b, 0x9b, 0x3c,
	0x4b, 0x7c, 0x66, 0x4c, 0x30, 0x9e, 0x78, 0x5e, 0xea, 0x33, 0x66, 0xff, 0x74, 0x40, 0x8f, 0x61,
	0xe3, 0xbd, 0x4f, 0x82, 0x90, 0x0b, 0x7c, 0x75, 0xbb, 0x3c, 0xa9, 0x5f, 0xc0, 0x65, 0x76, 0x01,
	0x63, 0x16, 0x27, 0x5b, 0x7e, 0x27, 0x22, 0x6f, 0x6f, 0x12, 0xd1, 0xff, 0x97, 0x88, 0x18, 0x78,
	0x13, 0xcb, 0x1c, 0x3e, 0xf9, 0x83, 0x1c, 0xc9, 0x55, 0x36, 0xad, 0x7f, 0xfe, 0xa8, 0xf5, 0x7a,
	0x7f, 0x52, 0xc0, 0xe1, 0xa4, 0x80, 0x6f, 0x27, 0x05, 0x7c, 0x3e, 0x2b, 0xd2, 0xe1, 0xac, 0x48,
	0x5f, 0xcf, 0x8a, 0xf4, 0x6e, 0x7c, 0x85, 0x54, 0x64, 0xa6, 0xe5, 0xb5, 0xcf, 0x0b, 0xbd, 0xd8,
	0x82, 0xdd, 0xd8, 0xfc, 0x70, 0x59, 0x05, 0x41, 0x79, 0xd9, 0x10, 0x77, 0xfa, 0xd5, 0x8f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x34, 0x09, 0x7e, 0xa3, 0x2c, 0x03, 0x00, 0x00,
}

func (m *RoyaltyConfigByClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoyaltyConfigByClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoyaltyConfigByClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RoyaltyConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoyaltyConfig(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintRoyaltyConfig(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoyaltyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoyaltyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoyaltyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stakeholders) > 0 {
		for iNdEx := len(m.Stakeholders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakeholders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoyaltyConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RateBasisPoints != 0 {
		i = encodeVarintRoyaltyConfig(dAtA, i, uint64(m.RateBasisPoints))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoyaltyStakeholder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoyaltyStakeholder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoyaltyStakeholder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintRoyaltyConfig(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintRoyaltyConfig(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoyaltyConfigInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoyaltyConfigInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoyaltyConfigInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stakeholders) > 0 {
		for iNdEx := len(m.Stakeholders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakeholders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoyaltyConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RateBasisPoints != 0 {
		i = encodeVarintRoyaltyConfig(dAtA, i, uint64(m.RateBasisPoints))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoyaltyStakeholderInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoyaltyStakeholderInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoyaltyStakeholderInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintRoyaltyConfig(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintRoyaltyConfig(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRoyaltyConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoyaltyConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RoyaltyConfigByClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovRoyaltyConfig(uint64(l))
	}
	l = m.RoyaltyConfig.Size()
	n += 1 + l + sovRoyaltyConfig(uint64(l))
	return n
}

func (m *RoyaltyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateBasisPoints != 0 {
		n += 1 + sovRoyaltyConfig(uint64(m.RateBasisPoints))
	}
	if len(m.Stakeholders) > 0 {
		for _, e := range m.Stakeholders {
			l = e.Size()
			n += 1 + l + sovRoyaltyConfig(uint64(l))
		}
	}
	return n
}

func (m *RoyaltyStakeholder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovRoyaltyConfig(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovRoyaltyConfig(uint64(m.Weight))
	}
	return n
}

func (m *RoyaltyConfigInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateBasisPoints != 0 {
		n += 1 + sovRoyaltyConfig(uint64(m.RateBasisPoints))
	}
	if len(m.Stakeholders) > 0 {
		for _, e := range m.Stakeholders {
			l = e.Size()
			n += 1 + l + sovRoyaltyConfig(uint64(l))
		}
	}
	return n
}

func (m *RoyaltyStakeholderInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovRoyaltyConfig(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovRoyaltyConfig(uint64(m.Weight))
	}
	return n
}

func sovRoyaltyConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoyaltyConfig(x uint64) (n int) {
	return sovRoyaltyConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoyaltyConfigByClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoyaltyConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoyaltyConfigByClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoyaltyConfigByClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyaltyConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoyaltyConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyaltyConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RoyaltyConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoyaltyConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoyaltyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoyaltyConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoyaltyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoyaltyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateBasisPoints", wireType)
			}
			m.RateBasisPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyaltyConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RateBasisPoints |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakeholders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyaltyConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakeholders = append(m.Stakeholders, RoyaltyStakeholder{})
			if err := m.Stakeholders[len(m.Stakeholders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoyaltyConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoyaltyStakeholder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoyaltyConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoyaltyStakeholder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoyaltyStakeholder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyaltyConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyaltyConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoyaltyConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoyaltyConfigInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoyaltyConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoyaltyConfigInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoyaltyConfigInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateBasisPoints", wireType)
			}
			m.RateBasisPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyaltyConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RateBasisPoints |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakeholders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyaltyConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakeholders = append(m.Stakeholders, RoyaltyStakeholderInput{})
			if err := m.Stakeholders[len(m.Stakeholders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoyaltyConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoyaltyStakeholderInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoyaltyConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoyaltyStakeholderInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoyaltyStakeholderInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyaltyConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoyaltyConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoyaltyConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoyaltyConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoyaltyConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoyaltyConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoyaltyConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoyaltyConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoyaltyConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoyaltyConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoyaltyConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoyaltyConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoyaltyConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoyaltyConfig = fmt.Errorf("proto: unexpected end of group")
)
